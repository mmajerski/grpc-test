// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: users.proto

package grpc

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UsersMock struct{}

func (m *UsersMock) Create(ctx context.Context, req *CreateUserRequest) (*UserReply, error) {
	res :=
		&UserReply{
			User: &User{
				Id:        732,
				Email:     "quasi_incidunt_ad@Jayo.gov",
				FirstName: "sequi",
				LastName:  "dolorem",
				Visible:   true,
			},
		}
	return res, nil
}
func (m *UsersMock) FindByID(ctx context.Context, req *FindByIDRequest) (*UserReply, error) {
	res :=
		&UserReply{
			User: &User{
				Id:        564,
				Email:     "DenisePeterson@Quamba.org",
				FirstName: "laborum",
				LastName:  "accusantium",
				Visible:   true,
			},
		}
	return res, nil
}
func (m *UsersMock) FindByEmail(ctx context.Context, req *FindByEmailRequest) (*UserReply, error) {
	res :=
		&UserReply{
			User: &User{
				Id:        141,
				Email:     "RubyHansen@Zoombeat.net",
				FirstName: "iusto",
				LastName:  "tenetur",
				Visible:   true,
			},
		}
	return res, nil
}
func (m *UsersMock) Update(ctx context.Context, req *UpdateUserRequest) (*UserReply, error) {
	res :=
		&UserReply{
			User: &User{
				Id:        507,
				Email:     "veritatis_et_quam@Blogtags.mil",
				FirstName: "minus",
				LastName:  "enim",
				Visible:   false,
			},
		}
	return res, nil
}
func (m *UsersMock) Delete(ctx context.Context, req *DeleteUserRequest) (*UserReply, error) {
	res :=
		&UserReply{
			User: &User{
				Id:        739,
				Email:     "in_eos@Trilith.net",
				FirstName: "iure",
				LastName:  "natus",
				Visible:   true,
			},
		}
	return res, nil
}
